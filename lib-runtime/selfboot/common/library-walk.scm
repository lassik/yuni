(define (%selfboot-gen-loadorder libread libcheck initial-dep)
  ;; (libread LIBNAME) => sexp
  ;; (libcheck LIBNAME) => LIBNAME(can be aliased) / #f(ignore)
  (define order '())
  (define (libname=? a b)
    (cond
      ((and (null? a) (null? b)) #t)
      (else
        (and (pair? a)
             (pair? b)
             (let ((aa (car a))
                   (bb (car b)))
               (and (eqv? aa bb)
                    (libname=? (cdr a) (cdr b))))))))
  (define (is-loaded? lib)
    (let loop ((q order))
     (and (pair? q)
          (let ((n (car q))
                (next (cdr q)))
            (or (libname=? n lib)
                (loop next))))))
  (define (tryload! lib)
    (let ((truename (libcheck lib)))
     (when (and truename (not (is-loaded? truename)))
       (let* ((code (libread truename))
              (deps (%selfboot-library-depends code)))
         (set! order (cons truename order))
         (for-each tryload! deps)))))

  (for-each tryload! initial-dep)
  order)
